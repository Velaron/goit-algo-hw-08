@startuml main

class main.AddressBook {
  + add_record()
  + find(): Record | None
  + delete()
  + get_upcoming_birthdays(): list[dict[str, str]]:
}

class main.Birthday {
  + date: datetime.date
  + find_next_weekday(): datetime.date {static}
  + adjust_for_weekend(): datetime.date {static}
}

class main.Bot {
  - book: AddressBook
  - commands: list[Command]
  + interface: BotInterface
  + add_command()
  - parse_input(): tuple[None, list[Any]] | tuple[str, list[str]]
  - get_help(): str
  + get_help_for_cmd(): str
  + save_data()
  - load_data()
  + run()
  + hello()
  + exit()
  + add_number()
  + change_number()
  + show_phone()
  + show_all()
  + add_birthday()
  + show_birthday()
  + get_birthdays()
}

abstract class main.BotInterface {
  + get_input(): str
  + show_message()
  + show_help()
}

class main.Command {
  + names: list[str]
  - func: Callable
  + help: str
  + bot: Bot
  + execute()
}

class main.ConsoleInterface {
}

class main.Field {
  + value: str
}

class main.Name {
}

class main.Phone {
}

class main.Record {
  + name: Name
  + phones: list[Phone]
  + birthday: Birthday | None
  + add_birthday()
  + add_phone()
  + remove_phone()
  + edit_phone()
  + find_phone(): Phone | None
}

main.Field <|-- main.Birthday
main.Bot *-- main.AddressBook
main.Bot *-- main.Command
main.Bot *-- main.BotInterface
main.Command *-- main.Bot
main.BotInterface <|-- main.ConsoleInterface
main.Field <|-- main.Name
main.Field <|-- main.Phone
main.Record *-- main.Name
main.Record *-- main.Phone
main.Record *-- main.Birthday

@enduml

